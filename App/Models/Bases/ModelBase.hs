{- DO NOT EDIT THIS FILE
   THIS FILE IS AUTOMAGICALLY GENERATED AND YOUR CHANGES WILL BE EATEN BY THE GENERATOR OVERLORD -}

module App.Models.Bases.ModelBase (
  module App.Models.Bases.ModelBase,
  module Control.Exception,
  module Control.Monad.Trans,
  module Data.Int
  ) where

import Control.Monad.Trans
import Control.Exception
import Database.HDBC
import Data.Int

import Turbinado.Controller.Monad

-- Using phantom types here 
class DatabaseModel m where
  tableName :: m -> String

type SelectString = String
type SelectParams = [SqlValue]

class (DatabaseModel model) =>
        IsModel model where
        insert    :: (MonadIO m, IConnection conn) => conn -> model -> m Integer
        findAll   :: (MonadIO m, IConnection conn) => conn -> m [model]
        findAllBy :: (MonadIO m, IConnection conn) => conn -> SelectString -> SelectParams -> m [model]
        findOneBy :: (MonadIO m, IConnection conn) => conn -> SelectString -> SelectParams -> m model

class (DatabaseModel model) =>
        HasFindByPrimaryKey model primaryKey | model -> primaryKey where
    find   :: (MonadIO m, IConnection conn) => conn -> primaryKey -> m model
    update :: (MonadIO m, IConnection conn) => conn -> model      -> m ()   

